#!/usr/bin/python
import xml.etree.ElementTree as ET, glob, os, sys

# Nicely indents the XML output 
def indent(elem, level=0):
    i = "\n" + level*"\t"
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "\t"
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

# Removes empty nodes from the tree
def removeemptytags(elem):
	if elem.text:
		elem.text = elem.text.strip()
	toberemoved= []
	for child in elem:
		if len(child)==0 and child.text==None and len(child.attrib)==0:
			toberemoved.append(child)
	for child in toberemoved:
		elem.remove(child)
	for child in elem:
		removeemptytags(child)
	# Convert error to errorminus and errorplus
	if 'error' in elem.attrib:
		err = elem.attrib['error']
		del elem.attrib['error']
		elem.attrib['errorminus'] = err
		elem.attrib['errorplus'] = err

# Check if an unknown tag is present (most likely an indication for a typo)
validtags = ["system","name","new","description","ascendingnode","discoveryyear","lastupdate","list","discoverymethod","semimajoraxis","period","magV","distance","longitude","imagedescription","image","age","declination","rightascension","metallicity","inclination","spectraltype","binary","planet","periastron","star","mass","eccentricity","radius","temperature","videolink","transittime","rossitermclaughlin"]

def checkforvalidtags(elem):
	problematictag = None
	for child in elem:
		_tmp = checkforvalidtags(child)
		if _tmp:
			problematictag = _tmp
	if elem.tag not in validtags:
		problematictag = elem.tag
	return problematictag
	

# Loop over all files and  create new data
for filename in glob.glob("systems*/*.xml"):
	try:
		f = open(filename, 'rt')
		root = ET.parse(f).getroot()
		f.close()
		if (root.findtext("./name")+".xml"!=os.path.basename(filename)):
			print "Name of system not the same as filename: " + filename

		problematictag = checkforvalidtags(root)
		if problematictag:
			print "Problematic tag <"+problematictag+"> found in file \""+filename+"\"."
		removeemptytags(root)
		indent(root)
		ET.ElementTree(root).write(filename) 
	except:
		print "Error parsing file "+filename+": ",sys.exc_info()[0]
